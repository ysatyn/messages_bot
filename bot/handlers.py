from telebot.async_telebot import AsyncTeleBot 
from db.database import get_async_db
from db import crud

from config import ADMIN_ID, COST

from sqlalchemy.ext.asyncio import AsyncSession
from telebot import types

from bot.utils import escape_html, create_user_link, db_handler, create_state_filter, update_data, get_data

from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_handler_backends import State, StatesGroup

from db.models import Note

from global_logger import logger

class NoteStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_note_text = State()
    waiting_for_update_note_text = State()
    waiting_for_unread_quantity = State()


async def debug_state(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    state = await bot.get_state(message.from_user.id, message.chat.id)
    await bot.send_message(message.chat.id, f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")


async def start_note_creation(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    user = await crud.create_or_update_user(
        db,
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    await bot.set_state(message.from_user.id, NoteStates.waiting_for_user_id, message.chat.id)
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    request_user_button = types.KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        request_user=types.KeyboardButtonRequestUser(request_id=1, user_is_bot=False),
    )
    keyboard.add(request_user_button)

    await bot.send_message(message.chat.id, "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)


async def process_user_id(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    state = await bot.get_state(message.from_user.id, message.chat.id)
    user_id_text = message.text.strip()
    if not user_id_text.isdigit():
        await bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.warning("Incorrect user_id received")
        return
    await bot.set_state(message.from_user.id, NoteStates.waiting_for_note_text, message.chat.id)
    await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await update_data(bot, message.from_user.id, message.chat.id, user_id=int(user_id_text))


async def process_note_text(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as state_data:
        for_user_id = state_data.get("user_id")

    note_text = message.text.strip()

    if not (5 <= len(note_text) <= 2000):
        await bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5.")
        logger.warning(f"Note text is too long/short: {len(note_text)} total chars")
        return

    note = await crud.create_note(
        db,
        for_user_id=for_user_id,
        text=note_text,
        created_by_user_id=message.from_user.id
    )

    await bot.send_message(message.chat.id, f"–ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {for_user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await bot.delete_state(message.from_user.id, message.chat.id)


async def handle_start(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    message_parts = message.text.split()        
    user = await crud.create_or_update_user(
            db,
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    if len(message_parts) == 1:
        await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {escape_html(user.first_name)}! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    
    if len(message_parts) == 2:
        ref_code = message_parts[1]
        ref_user = await crud.get_user_by_ref_code(db, ref_code)
        if ref_user:
            if ref_user.user_id == user.user_id:
                await bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π")
                logger.warning(f"User {user_id} attempted to read a note to themselves")
                return
            creator_user = await crud.get_user_by_ref_code(db, ref_code)
            note = await crud.get_note_by_user_id_and_creator_id(db, user.user_id, creator_user.user_id)
            if note is None:
                await bot.send_message(message.chat.id,  "üì≠ –¢–µ–±–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏...\n\n–ù–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –ø–µ—Ä–≤—ã–º –∫–æ–º–∞–Ω–¥–æ–π /note")
                return
            message_text = f"–í–∞–º –ø–∏—Å—å–º–æ –æ—Ç {creator_user.first_name}:\n\n"\
                           f"{escape_html(note.text)}"
            markup = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –ø—Ä–æ—á—Ç–µ–Ω–∏–µ", callback_data=f"hide_read_{note.id}")
            markup.add(button)
            await crud.set_note_as_read(db, note_id=note.id)
            await bot.send_message(message.chat.id, message_text, reply_markup=markup)





async def get_my_ref_link(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    user = await crud.create_or_update_user(
            db,
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    if not user.ref_code:
        ref_code = await crud.generate_unique_ref_code(db, user)
        user.ref_code = ref_code
        db.add(user)
        await db.commit()
        await db.refresh(user)
    ref_link = f"https://t.me/ToUserBot?start={user.ref_code}"
    await bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}")


async def handle_user_shared(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    if not message.user_shared:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.error(f"Failed to get shared user data from user {message.from_user.id}")
        return

    for_user_id = message.user_shared.users[0].user_id
    
    await bot.set_state(message.from_user.id, NoteStates.waiting_for_note_text, message.chat.id)
    await bot.send_message(message.chat.id, "‚ú® –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await update_data(bot, message.from_user.id, message.chat.id, user_id=int(for_user_id))


async def handle_get_my_notes(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    user_id = message.from_user.id
    notes = await crud.get_notes_by_user_id(db, user_id)
    
    if not notes:
        logger.info(f"User {user_id} has no notes yet")
        await bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–∏–∫–æ–º—É –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –ø–æ—Å–ª–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /note —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ")
        return
    
    logger.info(f"User {user_id} requested their notes list - {len(notes)} notes found")
    
    top_message = f"–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ {len(notes)} –ø–æ—Å–ª–∞–Ω–∏–µ(–∏–π):\n\n"

    markup = types.InlineKeyboardMarkup()

    for note in notes:
        for_who = await crud.get_user_by_id(db, note.for_user_id)
        if for_who:
            for_who = escape_html(for_who.first_name)
        else:
            for_who = str(note.for_user_id)

        read_status = "‚úÖ" if note.fake_is_read else "‚ùå"
        top_message += f"{read_status} –î–ª—è `{for_who}` –≤ {note.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        button = types.InlineKeyboardButton(
            text=f"{read_status} –ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è {for_who}",
            callback_data=f"view_note_{note.id}"
        )
        markup.add(button)
    
    await bot.send_message(message.chat.id, top_message, reply_markup=markup, parse_mode='Markdown')


async def handle_buy_unread(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    chat_id = message.chat.id
    user_id = message.from_user.id
    logger.info(f"User {user_id} initiated purchase of unread cancels")
    
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
        callback_data="cancel_purchase"
    )
    markup.add(button)
    await bot.send_message(chat_id, f"–û–¥–Ω–∞ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å—Ç–æ–∏—Ç {COST} –∑–≤—ë–∑–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=markup)
    await bot.set_state(user_id, NoteStates.waiting_for_unread_quantity, chat_id)


async def handle_hide_read_callback(call: types.CallbackQuery, bot: AsyncTeleBot, db: AsyncSession):
    data = call.data
    user_id = call.from_user.id
    message_id = call.message.message_id
    chat_id = call.message.chat.id

    if not data.startswith("hide_read_"):
        return
    
    note_id = int(data.split("_")[-1])
    note = await crud.get_note_by_id(db, note_id)
    if not note:
        logger.warning(f"User {user_id} tried to hide read for non-existent note {note_id}")
        await bot.answer_callback_query(call.id, "–ü–æ—Å–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if note.for_user_id != user_id:
        logger.warning(f"User {user_id} attempted to hide read for someone else's note {note_id}")
        await bot.answer_callback_query(call.id, "–ö–æ–≥–æ-—Ç–æ –ø–æ —Ä—É–∫–∞–º –æ—Ç—à–ª—ë–ø–∞—Ç—å?")
        return
    

    user = await crud.get_user_by_id(db, note.for_user_id)
    if user.count_read_cancel <= 0:
        logger.info(f"User {user_id} has insufficient read cancels (balance: {user.count_read_cancel})")
        await bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–º–µ–Ω –ø—Ä–æ—á—Ç–µ–Ω–∏—è. –ö—É–ø–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /buy_unread")
        return
    
    logger.info(f"User {user_id} hiding read for note {note_id}, balance decreased from {user.count_read_cancel} to {user.count_read_cancel - 1}")
    await crud.set_note_as_unread(db, note_id)
    await crud.update_user_balance(db, user_id, -1)
    await bot.edit_message_text("–ü—Ä–æ—á—Ç–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º", chat_id, message_id)


async def handle_cancel_purchase_callback(call: types.CallbackQuery, bot: AsyncTeleBot, db: AsyncSession):
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    logger.info(f"User {user_id} cancelled purchase process")
    await bot.delete_state(user_id, chat_id)
    await bot.edit_message_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id, message_id)


async def handle_unread_quantity(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    chat_id = message.chat.id
    user_id = message.from_user.id
    state = await bot.get_state(user_id, chat_id)
    
    quantity_text = message.text.strip()
    if not quantity_text.isdigit() or int(quantity_text) <= 0:
        logger.warning(f"User {user_id} entered invalid quantity: {quantity_text}")
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    quantity = int(quantity_text)
    total_cost = quantity * COST

    logger.info(f"User {user_id} purchasing {quantity} read cancels for {total_cost} stars")
    await bot.delete_state(user_id, chat_id)
    await bot.send_invoice(
        chat_id,
        title="–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è",
        description=f"–ü–æ–∫—É–ø–∫–∞ {quantity} –æ—Ç–º–µ–Ω –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∑–∞ {total_cost} –∑–≤—ë–∑–¥",
        provider_token=None,
        currency="XTR",
        invoice_payload=f"buy_unread_{user_id}_{quantity}",
        prices=[types.LabeledPrice(label=f"{quantity} –æ—Ç–º–µ–Ω –ø—Ä–æ—á—Ç–µ–Ω–∏—è", amount=total_cost)]
    )



async def handle_view_note_callback(call: types.CallbackQuery, bot: AsyncTeleBot, db: AsyncSession):
    data = call.data
    message_id = call.message.message_id
    chat_id = call.message.chat.id

    if not data.startswith("view_note_"):
        return
    note_id = int(data.split("_")[-1])

    note = await crud.get_note_by_id(db, note_id)
    if not note:
        logger.warning(f"User {call.from_user.id} tried to view non-existent note {note_id}")
        await bot.answer_callback_query(call.id, "–ü–æ—Å–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    if note.created_by_user_id != call.from_user.id:
        logger.warning(f"User {call.from_user.id} attempted to view note {note_id} created by {note.created_by_user_id}")
        await bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç–æ –ø–æ—Å–ª–∞–Ω–∏–µ.")
        return
    
    logger.info(f"User {call.from_user.id} viewing note {note_id} for user {note.for_user_id}")
    
    for_who = await crud.get_user_by_id(db, note.for_user_id)
    if for_who:
        for_who = escape_html(for_who.first_name)
    else:
        for_who = str(note.for_user_id)

    read_status = "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if note.fake_is_read else "‚ùå –ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
    
    top_message = f"üìù –ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è {for_who}\n"
    top_message += f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {read_status}\n"
    top_message += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {note.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
    top_message += f"üí¨ –¢–µ–∫—Å—Ç:\n{escape_html(note.text)}"

    markup = types.InlineKeyboardMarkup()
    button_edit = types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_note_{note.id}"
    )
    button_delete = types.InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_note_{note.id}"
    )
    
    button_back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_notes"
    )
    
    markup.add(button_edit, button_delete)
    markup.add(button_back)

    await bot.edit_message_text(top_message, chat_id, message_id, parse_mode='HTML', reply_markup=markup)


async def handle_edit_note_callback(call: types.CallbackQuery, bot: AsyncTeleBot, db: AsyncSession):
    data = call.data
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if not data.startswith("edit_note_"):
        return
    
    note_id = int(data.split("_")[-1])
    note = await crud.get_note_by_id(db, note_id)
    if not note:
        logger.warning(f"User {user_id} tried to edit non-existent note {note_id}")
        await bot.answer_callback_query(call.id, "–ü–æ—Å–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if note.created_by_user_id != call.from_user.id:
        logger.warning(f"User {user_id} attempted to edit note {note_id} created by {note.created_by_user_id}")
        await bot.answer_callback_query(call.id, "–ö–æ–≥–æ-—Ç–æ –ø–æ —Ä—É–∫–∞–º –æ—Ç—à–ª—ë–ø–∞—Ç—å?")
        return

    logger.info(f"User {user_id} starting edit of note {note_id}")
    top_message = f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–∞–Ω–∏—è:"

    await bot.set_state(user_id, NoteStates.waiting_for_update_note_text, chat_id)
    await update_data(bot, user_id, chat_id, note_id=note_id)
    await bot.edit_message_text(top_message, chat_id, message_id)

async def handle_update_note_text(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    user_id = message.from_user.id
    chat_id = message.chat.id
    state = await bot.get_state(user_id, chat_id)
    
    note_id: str = await get_data(bot, user_id, chat_id, "note_id")

    note_text = message.text.strip()
    new_note = await crud.update_note_text(db, note_id, note_text)
    if not new_note:
        logger.warning(f"User {user_id} tried to update non-existent note {note_id}")
        await bot.send_message(chat_id, "–≠—Ç–æ–≥–æ –ø–æ—Å–ª–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–æ–º–∞–Ω–¥–æ–π /note")
        return 
    
    logger.info(f"User {user_id} successfully updated note {note_id}")
    
    markup = types.InlineKeyboardMarkup()
    button_back = types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_notes"
    )
    markup.add(button_back)

    await bot.send_message(chat_id, "–ü–æ—Å–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=markup)
    await bot.delete_state(user_id, chat_id)
    
async def handle_delete_note_callback(call: types.CallbackQuery, bot: AsyncTeleBot, db: AsyncSession):
    data = call.data
    message_id = call.message.message_id
    chat_id = call.message.chat.id

    if not data.startswith("delete_note_"):
        return
    note_id = int(data.split("_")[-1])

    note = await crud.get_note_by_id(db, note_id)
    if not note:
        logger.warning(f"User {call.from_user.id} tried to delete non-existent note {note_id}")
        await bot.answer_callback_query(call.id, "–ü–æ—Å–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    if note.created_by_user_id != call.from_user.id:
        logger.warning(f"User {call.from_user.id} attempted to delete note {note_id} created by {note.created_by_user_id}")
        await bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ –ø–æ—Å–ª–∞–Ω–∏–µ.")
        return
    
    markup = types.InlineKeyboardMarkup()
    button_back = types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_notes"
    )
    markup.add(button_back)

    success = await crud.delete_note_by_id(db, note_id)
    if success:
        logger.info(f"User {call.from_user.id} successfully deleted note {note_id}")
        await bot.edit_message_text("–ü–æ—Å–ª–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", chat_id, message_id, reply_markup=markup)
    else:
        logger.error(f"User {call.from_user.id} failed to delete note {note_id}")
        await bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ.")
    

async def handle_back_to_notes_callback(call: types.CallbackQuery, bot: AsyncTeleBot, db: AsyncSession):
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    logger.info(f"User {user_id} navigating back to notes list")
    await bot.delete_state(user_id, chat_id)
    notes = await crud.get_notes_by_user_id(db, user_id)
    if not notes:
        await bot.send_message(chat_id, "–í—ã –µ—â—ë –Ω–∏–∫–æ–º—É –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –ø–æ—Å–ª–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /note —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ")
        return
    
    top_message = f"üìí –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ {len(notes)} –ø–æ—Å–ª–∞–Ω–∏–µ(–∏–π):\n\n"

    markup = types.InlineKeyboardMarkup()

    for note in notes:
        for_who = await crud.get_user_by_id(db, note.for_user_id)
        if for_who:
            for_who = escape_html(for_who.first_name)
        else:
            for_who = str(note.for_user_id)
        
        read_status = "‚úÖ" if note.fake_is_read else "‚ùå"
        top_message += f"{read_status} –î–ª—è `{for_who}` –≤ {note.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        button = types.InlineKeyboardButton(
            text=f"{read_status} –ü–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è {for_who}",
            callback_data=f"view_note_{note.id}"
        )
        markup.add(button)
    
    await bot.edit_message_text(top_message, chat_id, message_id, reply_markup=markup, parse_mode='Markdown')


async def handle_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, bot: AsyncTeleBot, db: AsyncSession):
    logger.info(f"Pre-checkout query from user {pre_checkout_query.from_user.id}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def handle_successful_payment(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    try:
        payment_info = message.successful_payment
        user_id = message.from_user.id
        
        logger.info(f"Successful payment from user {user_id}, amount: {payment_info.total_amount}")
        
        if not payment_info.invoice_payload.startswith('buy_unread_'):
            logger.warning(f"Unknown invoice payload from user {user_id}: {payment_info.invoice_payload}")
            return
            
        payload_parts = payment_info.invoice_payload.split('_')
        if len(payload_parts) != 4:
            logger.warning(f"Invalid payload format from user {user_id}: {payment_info.invoice_payload}")
            return
            
        quantity = int(payload_parts[-1])  
        
        user, admin_panel = await crud.process_payment(
            db, 
            user_id=user_id,
            quantity=quantity,
            total_cost=payment_info.total_amount
        )
        
        logger.info(f"Payment processed for user {user_id}: {quantity} cancels, new balance: {user.count_read_cancel}")
        
        await bot.send_message(
            message.chat.id, 
            f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {quantity} –æ—Ç–º–µ–Ω –ø—Ä–æ—á—Ç–µ–Ω–∏—è!\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.count_read_cancel} –æ—Ç–º–µ–Ω"
        )
    except Exception as e:
        logger.error(f"Payment processing error for user {message.from_user.id}: {e}")
        await bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


async def handle_admin(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    if message.from_user.id != ADMIN_ID:
        logger.warning(f"User {message.from_user.id} attempted to access admin panel")
        return
        
    logger.info(f"Admin {message.from_user.id} accessed admin panel")
    
    admin_panel = await crud.get_admin_panel(db)
    if not admin_panel:
        logger.error("Admin panel not found in database")
        await bot.send_message(message.chat.id, "–ß–µ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞, –ø–æ –∏–¥–µ–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å—Å—è")
        return
        
    top_message = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    top_message += f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {admin_panel.total_earnings} –∑–≤—ë–∑–¥\n"
    top_message += f"üìñ –ö—É–ø–ª–µ–Ω–æ –æ—Ç–º–µ–Ω –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {admin_panel.total_read_cancels_sold}\n"
    top_message += f"üë§ ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_panel.admin_user_id}\n\n"
    top_message += f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {admin_panel.last_restart.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)\n"

    await bot.send_message(message.chat.id, top_message)


async def handle_help(message: types.Message, bot: AsyncTeleBot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} requested help")
    
    help_text = "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n" \
    "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
    "/note - –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ\n" \
    "/mynotes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ—Å–ª–∞–Ω–∏—è\n" \
    "/myref - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å\n" \
    "/buy_unread - –ö—É–ø–∏—Ç—å –æ—Ç–º–µ–Ω—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è\n\n" \

    "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n" \
    "1. –ñ–º—ë—à—å –∫–æ–º–∞–Ω–¥—É /note\n" \
    "2. –í—ã–±–∏—Ä–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–±–∏—Ä–∞–µ—à—å –ø–æ—Å–ª–∞–Ω–∏–µ\n" \
    "(–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ)\n" \
    "3. –ü–æ–ª—É—á–∞–µ—à—å —Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /myref\n" \
    "4. –û—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É —É —Å–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –≤ —Ç–≥–∫\n" \
    "5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–∏–¥–∏—Ç —Ç–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ\n" \
    "(–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å–ª—É—á–∞–π–Ω–æ —É–≤–∏–¥–∏—Ç –Ω–µ —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)\n\n" \
    "*üõí –û—Ç–º–µ–Ω—ã –ø—Ä–æ—á—Ç–µ–Ω–∏—è:*\n" \
    "‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ —É–∑–Ω–∞–ª, —á—Ç–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
    "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫—Ä—ã—Ç—å –ø—Ä–æ—á—Ç–µ–Ω–∏–µ' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n" \
    "‚Ä¢ –û–¥–Ω–∞ –æ—Ç–º–µ–Ω–∞ —Å—Ç–æ–∏—Ç 100 –∑–≤—ë–∑–¥\n" \
    "‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ—Ç–º–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /mynotes\n\n" 
    await bot.send_message(message.chat.id, help_text, parse_mode='Markdown')




def register_handlers(bot: AsyncTeleBot):   
    bot.register_message_handler(db_handler(handle_user_shared), content_types=["users_shared"], pass_bot=True)       
    bot.register_message_handler(db_handler(debug_state), commands=["debugstate"], pass_bot=True)
    bot.register_message_handler(db_handler(handle_start), commands=["start"], pass_bot=True)
    bot.register_message_handler(db_handler(start_note_creation), commands=["note"], pass_bot=True)
    bot.register_message_handler(db_handler(get_my_ref_link), commands=["myref"], pass_bot=True)
    bot.register_message_handler(db_handler(handle_get_my_notes), commands=["mynotes"], pass_bot=True)
    bot.register_message_handler(db_handler(handle_help), commands=["help"], pass_bot=True)

    bot.register_pre_checkout_query_handler(db_handler(handle_pre_checkout_query), func=lambda query: True, pass_bot=True)
    bot.register_message_handler(db_handler(handle_successful_payment), content_types=['successful_payment'], pass_bot=True)
    bot.register_message_handler(db_handler(handle_buy_unread), commands=["buy_unread"], pass_bot=True)
    bot.register_message_handler(db_handler(handle_unread_quantity), func=create_state_filter(NoteStates.waiting_for_unread_quantity, bot), pass_bot=True, content_types=['text'])

    bot.register_message_handler(db_handler(handle_admin), commands=["admin"], pass_bot=True)

    bot.register_callback_query_handler(callback=db_handler(handle_view_note_callback), func=lambda call: call.data and call.data.startswith("view_note_"), pass_bot=True)
    bot.register_callback_query_handler(callback=db_handler(handle_edit_note_callback), func=lambda call: call.data and call.data.startswith("edit_note_"), pass_bot=True)
    bot.register_callback_query_handler(callback=db_handler(handle_delete_note_callback), func=lambda call: call.data and call.data.startswith("delete_note_"), pass_bot=True)
    bot.register_callback_query_handler(callback=db_handler(handle_back_to_notes_callback), func=lambda call: call.data == "back_to_notes", pass_bot=True)
    bot.register_callback_query_handler(callback=db_handler(handle_cancel_purchase_callback), func=lambda call: call.data == "cancel_purchase", pass_bot=True)
    bot.register_callback_query_handler(callback=db_handler(handle_hide_read_callback), func=lambda call: call.data and call.data.startswith("hide_read_"), pass_bot=True)

    bot.register_message_handler(db_handler(process_user_id), func=create_state_filter(NoteStates.waiting_for_user_id, bot), pass_bot=True, content_types=['text'])
    bot.register_message_handler(db_handler(process_note_text), func=create_state_filter(NoteStates.waiting_for_note_text, bot), pass_bot=True, content_types=['text'])
    bot.register_message_handler(db_handler(handle_update_note_text), func=create_state_filter(NoteStates.waiting_for_update_note_text, bot), pass_bot=True, content_types=['text'])
